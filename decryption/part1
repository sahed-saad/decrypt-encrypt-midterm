#include <iostream>
#include <string>
#include <vector>
using namespace std;
int main(){

    string encrypted; // stores plain text from the user 

// vector keys has a size of 83 elements, like possible keys for decryption
    vector<string>keys = {"utter", "descriptive", "caring", "pies", "drawer", "station", "soothe", "year", 
       "agreeable", "seemly", "button", "encourage", "reduce", "bed", "wave", "nosy", "zoo", "hateful", "flaky",      
         "work", "ear", "uneven", "cumbersome", "languid", "box", "devilish", "yawn", "ablaze", "lake", "harbor", "legs",
           "glow", "glossy", "cruel", "warn", "hard", "unique", "card", "hug", "tangible", "hook", "label", "exotic", "account", 
             "imagine", "grain", "tranquil", "book", "pickle", "whistle", "sack", "scissors", "trashy", "puzzled", "bottle", "smile",
               "neighborly", "eatable", "admit", "picayune", "type", "fast", "shy", "anger", "open", "add", "curly", "free", "aftermath",
                  "cherry", "daily", "heal", "rose", "abhorrent", "short", "fine", "guarded", "vase", "fascinated", "fresh", "chickens", "mine", "stare"};

    vector<string>decryption; // empty vectore which which will store decrypted text for each key

    decryption.resize(keys.size()); // size was 0 before, now it's 83, so resizing created the total number of keys

    vector<int>frequency(26, 0); // 26 elements with a default value of 0;

    cout << "Write the encrypted text : " << endl; 

    getline(cin, encrypted);

// Step 1 : a frequency analysis showing the counts of every letter of your team's encrypted text

    string toVoidrepetition = ""; // to store letters that have already been counted

    for(int i = 0; i < encrypted.size(); i++){
        if(isalpha(encrypted.at(i))){
        char x = tolower(encrypted.at(i)); 
        if(toVoidrepetition.find(x) == string::npos){ // This line is important because it checks if the characterhasn't been counted yet

            int count = 0;

            for(int j = 0; j < encrypted.size(); j++){

                if(x == encrypted.at(j)){

                    count++;
                }
            }
            cout << x << " : " << count << endl;
            toVoidrepetition = toVoidrepetition + x;
        }
    }
}

    return 0;
}
